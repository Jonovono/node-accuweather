{"version":3,"sources":["../../src/index.js"],"names":["request","require","ACCUWEATHER_API_KEY","qs","apikey","getLocationKey","Promise","resolve","reject","params","url","Object","assign","q","query","err","response","body","JSON","parse","Key","getNowWeatherAndRealFeel","then","key","details","Temperature","Imperial","Value","RealFeel","RealFeelTemperature"],"mappings":";;;;;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;;AAEA,IAAMC,sBAAsB,kCAA5B;;AAEA;;AAEA,IAAMC,KAAK,EAACC,QAAQF,mBAAT,EAAX;;AAEA,IAAMG,iBAAiB,SAAjBA,cAAiB;AAAA,WAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7D,YAAMC,SAAS;AACXC,iBAAK,qEADM;AAEXP,gBAAIQ,OAAOC,MAAP,CAAcT,EAAd,EAAkB,EAACU,GAAGC,KAAJ,EAAlB;AAFO,SAAf;AAIAd,gBAAQS,MAAR,EAAgB,UAACM,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AACrC,gBAAIF,GAAJ,EAASP,OAAOO,GAAP;AACTR,oBAAQW,KAAKC,KAAL,CAAWF,IAAX,EAAiB,CAAjB,EAAoBG,GAA5B;AACH,SAHD;AAIH,KAT+B,CAAT;AAAA,CAAvB;;AAWA,IAAMC,2BAA2B,SAA3BA,wBAA2B;AAAA,WAAS,IAAIf,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACzEH,uBAAeS,KAAf,EACGQ,IADH,CACQ,eAAO;AACX,gBAAMb,SAAS;AACXC,qBAAK,6DAA6Da,GADvD;AAEXpB,oBAAIQ,OAAOC,MAAP,CAAcT,EAAd,EAAkB,EAACqB,SAAS,IAAV,EAAlB;AAFO,aAAf;AAIAxB,oBAAQS,MAAR,EAAgB,UAACM,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AACvC,oBAAIF,GAAJ,EAASP,OAAOO,GAAP;AACTR,wBAAQ;AACNkB,iCAAaP,KAAKC,KAAL,CAAWF,IAAX,EAAiB,CAAjB,EAAoBQ,WAApB,CAAgCC,QAAhC,CAAyCC,KADhD;AAENC,8BAAUV,KAAKC,KAAL,CAAWF,IAAX,EAAiB,CAAjB,EAAoBY,mBAApB,CAAwCH,QAAxC,CAAiDC;AAFrD,iBAAR;AAID,aAND;AAOD,SAbH;AAcD,KAfyC,CAAT;AAAA,CAAjC;;AAiBA;AACA;;kBAEeN,wB","file":"index.js","sourcesContent":["const request = require('request')\n\nconst ACCUWEATHER_API_KEY = 'vbP5s0agPwR3QZNr72jHMPFa1IKTIgfE'\n\n// Gets the AccuWeather-specific location key so that a query can be made to get the weather\n\nconst qs = {apikey: ACCUWEATHER_API_KEY}\n\nconst getLocationKey = query => new Promise((resolve, reject) => {\n    const params = {\n        url: 'http://dataservice.accuweather.com/locations/v1/cities/autocomplete',\n        qs: Object.assign(qs, {q: query})\n    }\n    request(params, (err, response, body) => {\n        if (err) reject(err)\n        resolve(JSON.parse(body)[0].Key)\n    })\n})\n\nconst getNowWeatherAndRealFeel = query => new Promise((resolve, reject) => {\n  getLocationKey(query)\n    .then(key => {\n      const params = {\n          url: 'http://dataservice.accuweather.com/currentconditions/v1/' + key,\n          qs: Object.assign(qs, {details: true})\n      }\n      request(params, (err, response, body) => {\n        if (err) reject(err)\n        resolve({\n          Temperature: JSON.parse(body)[0].Temperature.Imperial.Value,\n          RealFeel: JSON.parse(body)[0].RealFeelTemperature.Imperial.Value\n        })\n      })\n    })\n})\n\n// getLocationKey(\"New York\").then(key => console.log(key))\n// getNowWeatherAndRealFeel(\"New York\").then(result => console.log(result))\n\nexport default getNowWeatherAndRealFeel"]}