{"version":3,"sources":["../../src/index.js"],"names":["request","require","accuweather","getLocationKey","query","Promise","resolve","reject","params","url","qs","apikey","API_KEY","q","err","response","body","JSON","parse","Key","getNowWeatherAndRealFeel","then","key","details","Temperature","Imperial","Value","RealFeel","RealFeelTemperature","module","exports"],"mappings":";;;;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;;AAEA,IAAMC,cAAc,SAAdA,WAAc,UAAW;AAC7B;;AAEA,MAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,KAAD;AAAA,WAAW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACjE,UAAMC,SAAS;AACbC,aAAK,qEADQ;AAEbC,YAAI,EAACC,QAAQC,OAAT,EAAkBC,GAAGT,KAArB;AAFS,OAAf;AAIAJ,cAAQQ,MAAR,EAAgB,UAACM,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AACvC,YAAIF,GAAJ,EAASP,OAAOO,GAAP;AACTR,gBAAQW,KAAKC,KAAL,CAAWF,IAAX,EAAiB,CAAjB,EAAoBG,GAA5B;AACD,OAHD;AAID,KATiC,CAAX;AAAA,GAAvB;;AAWA,MAAMC,2BAA2B,SAA3BA,wBAA2B,CAAChB,KAAD,EAAW;AAC1C,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCJ,qBAAeC,KAAf,EAAsBQ,OAAtB,EACGS,IADH,CACQ,eAAO;AACX,YAAMb,SAAS;AACbC,eAAK,6DAA6Da,GADrD;AAEbZ,cAAI,EAACC,QAAQC,OAAT,EAAkBW,SAAS,IAA3B;AAFS,SAAf;AAIAvB,gBAAQQ,MAAR,EAAgB,UAACM,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AACvC,cAAIF,GAAJ,EAASP,OAAOO,GAAP;AACTR,kBAAQ;AACNkB,yBAAaP,KAAKC,KAAL,CAAWF,IAAX,EAAiB,CAAjB,EAAoBQ,WAApB,CAAgCC,QAAhC,CAAyCC,KADhD;AAENC,sBAAUV,KAAKC,KAAL,CAAWF,IAAX,EAAiB,CAAjB,EAAoBY,mBAApB,CAAwCH,QAAxC,CAAiDC;AAFrD,WAAR;AAID,SAND;AAOD,OAbH;AAcD,KAfM,CAAP;AAgBD,GAjBD;;AAmBA,2BAASN,kDAAT,gCAAmCA,wBAAnC;AACD,CAlCD;;AAoCAS,OAAOC,OAAP,GAAiB5B,WAAjB","file":"index.js","sourcesContent":["const request = require('request')\n\nconst accuweather = API_KEY => {\n  // Gets the AccuWeather-specific location key so that a query can be made to get the weather\n\n  const getLocationKey = (query) => new Promise((resolve, reject) => {\n    const params = {\n      url: 'http://dataservice.accuweather.com/locations/v1/cities/autocomplete',\n      qs: {apikey: API_KEY, q: query}\n    }\n    request(params, (err, response, body) => {\n      if (err) reject(err)\n      resolve(JSON.parse(body)[0].Key)\n    })\n  })\n\n  const getNowWeatherAndRealFeel = (query) => {\n    return new Promise((resolve, reject) => {\n      getLocationKey(query, API_KEY)\n        .then(key => {\n          const params = {\n            url: 'http://dataservice.accuweather.com/currentconditions/v1/' + key,\n            qs: {apikey: API_KEY, details: true}\n          }\n          request(params, (err, response, body) => {\n            if (err) reject(err)\n            resolve({\n              Temperature: JSON.parse(body)[0].Temperature.Imperial.Value,\n              RealFeel: JSON.parse(body)[0].RealFeelTemperature.Imperial.Value\n            })\n          })\n        })\n    })\n  }\n\n  return { getNowWeatherAndRealFeel, getNowWeatherAndRealFeel }\n}\n\nmodule.exports = accuweather"]}