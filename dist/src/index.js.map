{"version":3,"sources":["../../src/index.js"],"names":["request","require","accuweather","API_KEY","getLocationKey","query","Promise","resolve","reject","params","url","qs","apikey","q","err","response","body","JSON","parse","Key","getNowWeatherAndRealFeel","then","key","details","Temperature","Imperial","Value","RealFeel","RealFeelTemperature","module","exports"],"mappings":";;;;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;;AAEA,IAAMC,cAAc,SAAdA,WAAc,GAAM;AACxB,SAAO,UAACC,OAAD,EAAa;AAClB;;AAEA,QAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,KAAD;AAAA,aAAW,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACjE,YAAMC,SAAS;AACbC,eAAK,qEADQ;AAEbC,cAAI,EAACC,QAAQT,OAAT,EAAkBU,GAAGR,KAArB;AAFS,SAAf;AAIAL,gBAAQS,MAAR,EAAgB,UAACK,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AACvC,cAAIF,GAAJ,EAASN,OAAOM,GAAP;AACTP,kBAAQU,KAAKC,KAAL,CAAWF,IAAX,EAAiB,CAAjB,EAAoBG,GAA5B;AACD,SAHD;AAID,OATiC,CAAX;AAAA,KAAvB;;AAWA,QAAMC,2BAA2B,SAA3BA,wBAA2B,CAACf,KAAD,EAAW;AAC1C,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCJ,uBAAeC,KAAf,EAAsBF,OAAtB,EACGkB,IADH,CACQ,eAAO;AACX,cAAMZ,SAAS;AACbC,iBAAK,6DAA6DY,GADrD;AAEbX,gBAAI,EAACC,QAAQT,OAAT,EAAkBoB,SAAS,IAA3B;AAFS,WAAf;AAIAvB,kBAAQS,MAAR,EAAgB,UAACK,GAAD,EAAMC,QAAN,EAAgBC,IAAhB,EAAyB;AACvC,gBAAIF,GAAJ,EAASN,OAAOM,GAAP;AACTP,oBAAQ;AACNiB,2BAAaP,KAAKC,KAAL,CAAWF,IAAX,EAAiB,CAAjB,EAAoBQ,WAApB,CAAgCC,QAAhC,CAAyCC,KADhD;AAENC,wBAAUV,KAAKC,KAAL,CAAWF,IAAX,EAAiB,CAAjB,EAAoBY,mBAApB,CAAwCH,QAAxC,CAAiDC;AAFrD,aAAR;AAID,WAND;AAOD,SAbH;AAcD,OAfM,CAAP;AAgBD,KAjBD;;AAmBA,6BAASN,kDAAT,gCAAmCA,wBAAnC;AACD,GAlCD;AAmCD,CApCD;;AAsCAS,OAAOC,OAAP,GAAiB5B,WAAjB","file":"index.js","sourcesContent":["const request = require('request')\n\nconst accuweather = () => {\n  return (API_KEY) => {\n    // Gets the AccuWeather-specific location key so that a query can be made to get the weather\n\n    const getLocationKey = (query) => new Promise((resolve, reject) => {\n      const params = {\n        url: 'http://dataservice.accuweather.com/locations/v1/cities/autocomplete',\n        qs: {apikey: API_KEY, q: query}\n      }\n      request(params, (err, response, body) => {\n        if (err) reject(err)\n        resolve(JSON.parse(body)[0].Key)\n      })\n    })\n\n    const getNowWeatherAndRealFeel = (query) => {\n      return new Promise((resolve, reject) => {\n        getLocationKey(query, API_KEY)\n          .then(key => {\n            const params = {\n              url: 'http://dataservice.accuweather.com/currentconditions/v1/' + key,\n              qs: {apikey: API_KEY, details: true}\n            }\n            request(params, (err, response, body) => {\n              if (err) reject(err)\n              resolve({\n                Temperature: JSON.parse(body)[0].Temperature.Imperial.Value,\n                RealFeel: JSON.parse(body)[0].RealFeelTemperature.Imperial.Value\n              })\n            })\n          })\n      })\n    }\n\n    return { getNowWeatherAndRealFeel, getNowWeatherAndRealFeel }\n  }\n}\n\nmodule.exports = accuweather"]}