{"version":3,"sources":["../../src/index.js"],"names":["request","require","accuweather","API_KEY","baseUrl","getLocationKey","query","params","url","qs","apikey","q","json","then","body","Key","catch","console","error","err","getCurrentConditions","options","unit","key","details","Summary","WeatherText","Temperature","Imperial","Value","RealFeel","RealFeelTemperature","Precipitation","Precip1hr","Metric","module","exports"],"mappings":";;;;AAAA,IAAMA,UAAUC,QAAQ,iBAAR,CAAhB;;AAEA,IAAMC,cAAc,SAAdA,WAAc,GAAM;AACxB,SAAO,UAACC,OAAD,EAAa;AAClB,QAAMC,UAAU,oCAAhB;;AAEA;AACA,QAAMC,iBAAiB,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AAChC,UAAMC,SAAS;AACbC,aAAKJ,UAAU,mCADF;AAEbK,YAAI,EAACC,QAAQP,OAAT,EAAkBQ,GAAGL,KAArB,EAFS;AAGbM,cAAM;AAHO,OAAf;AAKA,aAAOZ,QAAQO,MAAR,EACJM,IADI,CACC;AAAA;AAAA,YAAEC,IAAF;;AAAA,eAAaA,KAAKC,GAAlB;AAAA,OADD,EAEJC,KAFI,CAEE;AAAA,eAAOC,QAAQC,KAAR,CAAcC,GAAd,CAAP;AAAA,OAFF,CAAP;AAGD,KATD;;AAWA,QAAMC,uBAAuB,SAAvBA,oBAAuB,CAACd,KAAD,EAAQe,OAAR,EAAoB;AAC/C,UAAIC,OAAO,WAAX;AACA,UAAID,OAAJ,EAAa;AACXC,eAAOD,QAAQC,IAAf;AACD;AACD,aAAOjB,eAAeC,KAAf,EAAsBH,OAAtB,EACJU,IADI,CACC,eAAO;AACX,YAAMN,SAAS;AACbC,eAAKJ,UAAU,wBAAV,GAAqCmB,GAD7B;AAEbd,cAAI,EAACC,QAAQP,OAAT,EAAkBqB,SAAS,IAA3B,EAFS;AAGbZ,gBAAM;AAHO,SAAf;AAKA,eAAOZ,QAAQO,MAAR,CAAP;AACD,OARI,EASJM,IATI,CASC,iBAAa;AAAA;AAAA,YAAXC,IAAW;;AACjB,YAAIQ,QAAQ,WAAZ,EAAyB;AACvB,iBAAO;AACLG,qBAASX,KAAKY,WADT;AAELC,yBAAab,KAAKa,WAAL,CAAiBC,QAAjB,CAA0BC,KAFlC;AAGLC,sBAAUhB,KAAKiB,mBAAL,CAAyBH,QAAzB,CAAkCC,KAHvC;AAILG,2BAAelB,KAAKmB,SAAL,CAAeL;AAJzB,WAAP;AAMD,SAPD,MAOO;AACL,iBAAO;AACLH,qBAASX,KAAKY,WADT;AAELC,yBAAab,KAAKa,WAAL,CAAiBO,MAAjB,CAAwBL,KAFhC;AAGLC,sBAAUhB,KAAKiB,mBAAL,CAAyBG,MAAzB,CAAgCL,KAHrC;AAILG,2BAAelB,KAAKmB,SAAL,CAAeC;AAJzB,WAAP;AAMD;AACF,OAzBI,EA0BJlB,KA1BI,CA0BE;AAAA,eAAOC,QAAQC,KAAR,CAAcC,GAAd,CAAP;AAAA,OA1BF,CAAP;AA2BD,KAhCD;;AAkCA,WAAO;AACLC,4BAAsBA;AADjB,KAAP;AAGD,GApDD;AAqDD,CAtDD;;AAwDAe,OAAOC,OAAP,GAAiBlC,WAAjB","file":"index.js","sourcesContent":["const request = require('request-promise')\n\nconst accuweather = () => {\n  return (API_KEY) => {\n    const baseUrl = 'http://dataservice.accuweather.com'\n\n    // Gets the AccuWeather-specific location key so that a query can be made to get the weather\n    const getLocationKey = (query) => {\n      const params = {\n        url: baseUrl + '/locations/v1/cities/autocomplete',\n        qs: {apikey: API_KEY, q: query},\n        json: true\n      }\n      return request(params)\n        .then(([body,]) => body.Key)\n        .catch(err => console.error(err))\n    }\n\n    const getCurrentConditions = (query, options) => {\n      let unit = \"Farenheit\"\n      if (options) {\n        unit = options.unit\n      }\n      return getLocationKey(query, API_KEY)\n        .then(key => {\n          const params = {\n            url: baseUrl + '/currentconditions/v1/' + key,\n            qs: {apikey: API_KEY, details: true},\n            json: true\n          }\n          return request(params)\n        })\n        .then(([body,]) => {\n          if (unit == \"Farenheit\") {\n            return {\n              Summary: body.WeatherText,\n              Temperature: body.Temperature.Imperial.Value,\n              RealFeel: body.RealFeelTemperature.Imperial.Value,\n              Precipitation: body.Precip1hr.Imperial\n            }\n          } else {\n            return {\n              Summary: body.WeatherText,\n              Temperature: body.Temperature.Metric.Value,\n              RealFeel: body.RealFeelTemperature.Metric.Value,\n              Precipitation: body.Precip1hr.Metric\n            }\n          }\n        })\n        .catch(err => console.error(err))\n    }\n\n    return {\n      getCurrentConditions: getCurrentConditions\n    }\n  }\n}\n\nmodule.exports = accuweather"]}