{"version":3,"sources":["../../src/index.js"],"names":["request","require","accuweather","API_KEY","baseUrl","queryLocations","params","url","qs","apikey","q","query","json","then","resp","catch","console","error","err","getFirstLocationKey","body","Key","getCurrentConditions","options","unit","locationKey","isNaN","Promise","resolve","parseInt","key","details","Summary","WeatherText","Temperature","Imperial","Value","RealFeel","RealFeelTemperature","Precipitation","Precip1hr","Metric","module","exports"],"mappings":";;;;AAAA,IAAMA,UAAUC,QAAQ,iBAAR,CAAhB;;AAEA,IAAMC,cAAc,SAAdA,WAAc,GAAM;AACxB,SAAO,UAACC,OAAD,EAAa;AAClB,QAAMC,UAAU,oCAAhB;;AAEA;AACA,QAAMC,iBAAiB,SAAjBA,cAAiB,QAAS;AAC9B,UAAMC,SAAS;AACbC,aAAKH,UAAU,mCADF;AAEbI,YAAI,EAACC,QAAQN,OAAT,EAAkBO,GAAGC,KAArB,EAFS;AAGbC,cAAM;AAHO,OAAf;AAKA,aAAOZ,QAAQM,MAAR,EACJO,IADI,CACC;AAAA,eAAQC,IAAR;AAAA,OADD,EAEJC,KAFI,CAEE;AAAA,eAAOC,QAAQC,KAAR,CAAcC,GAAd,CAAP;AAAA,OAFF,CAAP;AAGD,KATD;;AAWA;AACA,QAAMC,sBAAsB,SAAtBA,mBAAsB;AAAA,aAASd,eAAeM,KAAf,EAChCE,IADgC,CAC3B;AAAA;AAAA,YAAEO,IAAF;;AAAA,eAAaA,KAAKC,GAAlB;AAAA,OAD2B,EAEhCN,KAFgC,CAE1B;AAAA,eAAOC,QAAQC,KAAR,CAAcC,GAAd,CAAP;AAAA,OAF0B,CAAT;AAAA,KAA5B;;AAIA,QAAMI,uBAAuB,SAAvBA,oBAAuB,CAACX,KAAD,EAAQY,OAAR,EAAoB;AAC/C,UAAMC,OAAOD,UAAUA,QAAQC,IAAlB,GAAyB,WAAtC;AACA;AACA;AACA,UAAMC,cAAcC,MAAMf,KAAN,IAAeQ,oBAAoBR,KAApB,EAA2BR,OAA3B,CAAf,GAAqDwB,QAAQC,OAAR,CAAgBC,SAASlB,KAAT,CAAhB,CAAzE;AACA,aAAOc,YACJZ,IADI,CACC,eAAO;AACX,YAAMP,SAAS;AACbC,eAAKH,UAAU,wBAAV,GAAqC0B,GAD7B;AAEbtB,cAAI,EAACC,QAAQN,OAAT,EAAkB4B,SAAS,IAA3B,EAFS;AAGbnB,gBAAM;AAHO,SAAf;AAKA,eAAOZ,QAAQM,MAAR,CAAP;AACD,OARI,EASJO,IATI,CASC,iBAAa;AAAA;AAAA,YAAXO,IAAW;;AACjB,YAAII,QAAQ,WAAZ,EAAyB;AACvB,iBAAO;AACLQ,qBAASZ,KAAKa,WADT;AAELC,yBAAad,KAAKc,WAAL,CAAiBC,QAAjB,CAA0BC,KAFlC;AAGLC,sBAAUjB,KAAKkB,mBAAL,CAAyBH,QAAzB,CAAkCC,KAHvC;AAILG,2BAAenB,KAAKoB,SAAL,CAAeL;AAJzB,WAAP;AAMD,SAPD,MAOO;AACL,iBAAO;AACLH,qBAASZ,KAAKa,WADT;AAELC,yBAAad,KAAKc,WAAL,CAAiBO,MAAjB,CAAwBL,KAFhC;AAGLC,sBAAUjB,KAAKkB,mBAAL,CAAyBG,MAAzB,CAAgCL,KAHrC;AAILG,2BAAenB,KAAKoB,SAAL,CAAeC;AAJzB,WAAP;AAMD;AACF,OAzBI,EA0BJ1B,KA1BI,CA0BE;AAAA,eAAOC,QAAQC,KAAR,CAAcC,GAAd,CAAP;AAAA,OA1BF,CAAP;AA2BD,KAhCD;;AAkCA,WAAO;AACLb,sBAAgBA,cADX;AAELiB,4BAAsBA;AAFjB,KAAP;AAID,GA1DD;AA2DD,CA5DD;;AA8DAoB,OAAOC,OAAP,GAAiBzC,WAAjB","file":"index.js","sourcesContent":["const request = require('request-promise')\n\nconst accuweather = () => {\n  return (API_KEY) => {\n    const baseUrl = 'http://dataservice.accuweather.com'\n\n    // Queries all location keys based on keyword search\n    const queryLocations = query => {\n      const params = {\n        url: baseUrl + '/locations/v1/cities/autocomplete',\n        qs: {apikey: API_KEY, q: query},\n        json: true\n      }\n      return request(params)\n        .then(resp => resp)\n        .catch(err => console.error(err))\n    }\n\n    // Gets the first result for AccuWeather-specific location keys so that a query can be made to get the weather\n    const getFirstLocationKey = query => queryLocations(query)\n        .then(([body,]) => body.Key)\n        .catch(err => console.error(err))\n\n    const getCurrentConditions = (query, options) => {\n      const unit = options ? options.unit : \"Farenheit\"\n      // If query is a string, then do a keyword search and return the most relevant result's location key.\n      // If query is a number (it is the location Key) then use that key\n      const locationKey = isNaN(query) ? getFirstLocationKey(query, API_KEY) : Promise.resolve(parseInt(query))\n      return locationKey\n        .then(key => {\n          const params = {\n            url: baseUrl + '/currentconditions/v1/' + key,\n            qs: {apikey: API_KEY, details: true},\n            json: true\n          }\n          return request(params)\n        })\n        .then(([body,]) => {\n          if (unit == \"Farenheit\") {\n            return {\n              Summary: body.WeatherText,\n              Temperature: body.Temperature.Imperial.Value,\n              RealFeel: body.RealFeelTemperature.Imperial.Value,\n              Precipitation: body.Precip1hr.Imperial\n            }\n          } else {\n            return {\n              Summary: body.WeatherText,\n              Temperature: body.Temperature.Metric.Value,\n              RealFeel: body.RealFeelTemperature.Metric.Value,\n              Precipitation: body.Precip1hr.Metric\n            }\n          }\n        })\n        .catch(err => console.error(err))\n    }\n\n    return {\n      queryLocations: queryLocations,\n      getCurrentConditions: getCurrentConditions\n    }\n  }\n}\n\nmodule.exports = accuweather"]}